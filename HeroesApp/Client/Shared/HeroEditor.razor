@inject IHeroService HeroService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager


@if (hero != null)
{
    <EditForm  Model="@hero" OnValidSubmit="HandleSubmit">
        <div class="form-group">
            <label>First Name</label>
            <InputText @bind-Value="hero.FirstName" class="form-control"></InputText>
        </div>
        <div class="form-group">
            <label>Last Name</label>
            <InputText @bind-Value="hero.LastName" class="form-control"></InputText>
        </div>
        <div class="form-group">
            <label>Hero Name</label>
            <InputText @bind-Value="hero.HeroName" class="form-control"></InputText>
        </div>
        <div class="form-group">
            <label>Comic</label><br />
            <InputRadioGroup @bind-Value="hero.ComicId" class="form-control">
                @foreach (var comic in HeroService.Comics)
                {
                <InputRadio Value="@comic.Id" /><span style="padding-left: 5px;">@comic.Name</span><br />
                }
        </InputRadioGroup>
    </div>
    <button type="submit" class="btn btn-primary">Submit</button>
</EditForm>
}

@code {
    [Parameter]
    public Hero hero { get; set; } = new Hero();

    void GoBack()
    {
        NavigationManager.NavigateTo("/heroes");
    }

    protected override async Task OnParametersSetAsync()
    {
        await HeroService.GetComics();
    }

    async void HandleSubmit()
    {
        hero.Comic = null;

        await JSRuntime.InvokeVoidAsync("console.log", hero);

        if (hero.Id == 0)
        {
            await HeroService.CreateHero(hero);

        }
        else
        {
            await HeroService.UpdateHero(hero, hero.Id);
        }
        GoBack();
    }
}